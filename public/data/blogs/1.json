{
    "id": "1",
    "title": "自分のWebページについて",
    "date": "2025-04-22",
    "chips": [
      "React",
      "TypeScript",
      "Next.js"
    ],
  "content": "このブログでは、自分のWebページにどのような技術を使ったのか、また開発中にどのような問題が出たのかをリスト形式でまとめていきたいと思います。  \nまだ今日（4/22）の段階ではバックエンドの開発が終了していないので、フロントエンド中心の話になると思います。  \n  \nフロントエンドではNext.jsを使用しました。Reactは以前、春休みのハッカソンでJavaScript形式で使っていたのである程度慣れていましたが、そのときはCSSを直書きしていて非常に苦労したため、今回はMaterial UI（MUI）というライブラリを使用しました。  \n  \n最初はMUIの中にどんなコンポーネントがあるのか分からなかったので、ドキュメントを見ながらコピペしたり、ChatGPTに「こういうUIをMUIで構築するにはどうすれば良いか？」を相談しながら進めました。  \n  \n一応Next.jsと組み合わせてTailwindを使うかも迷いましたが、保守が大変そうだったのでやめました。  \n  \nアニメーションにはframer-motionを使いました。Appleが提唱しているSpring Animationを比較的簡単に表現できると考えたからです。  \n自分はパソコンもスマホもApple製品を使っていて、Appleを選ぶ一番の理由がUIなので、自分でもこういったUIが作れるか試してみたくなりました。  \n  \nトップページのアクセスカウンターは、Google Analytics 4（GA4）でアクセス数を取得し、それをGoogle Cloud Platform（GCP）を用いてAPI経由で表示しています。  \n  \nそれでは、それぞれ大変だったことを以下にリスト形式で書いていきます。（あとで追加・整理する予定です）  \n  \n- **TypeScriptの記法**  \n  今まで自分はJava, C, C#などのバックエンド系言語を扱っていたので、フロントエンド言語にはあまり触れていませんでした。特に違和感があったのが、変数の宣言方法とmapの使い方です。  \n  TypeScriptでは`let`や`const`で宣言し、型推論か右辺に型を明示する必要があります。左側に型を書くスタイルに慣れていたので、最初は戸惑いました。  \n  また、変数を更新するには直接代入せず、`useState`などのReactフックを使う必要がある点も慣れるまで時間がかかりました。  \n  変数に関数を代入する記法はC#のデリゲートに似ていたので、そこは比較的すんなり理解できました。  \n  mapの使い方も、JavaのStream APIを思い出しましたが、構文に慣れておらず、波括弧`{}`を忘れてエラーをよく出していました。ただ、mapを関数として捉え、returnで要素を返す構造は面白いと感じました。  \n  \n- **Next.js特有の機能**  \n  Next.jsの最大の特長のひとつは、サーバーサイドレンダリング（SSR）にありますが、自分はそれを知らずに使い始めたので、どの処理がサーバー側で動き、どれがクライアント側で動くのか理解するのに時間がかかりました。  \n  また、Next.jsには`pages/`ディレクトリや、`page.tsx`, `layout.tsx`など、特定のファイル名・フォルダ名に特別な意味があります。最初はそのルールを知らず、覚えるのが大変でした。  \n  ですが、一度覚えてしまうととても便利で、特に`layout.tsx`はその階層以下のすべての`page.tsx`に反映される点が非常に助かりました。  \n  知らなかったときは各ディレクトリに同じ`layout.tsx`をコピペしていたので、リファクタリング後はとてもスッキリして見やすくなりました。  \n  \nまだまだ書きたいことはありますが、整理に時間がかかりそうなので、また順次追記していきたいと思います。",
  "updatedAt": "2025-04-22"
}